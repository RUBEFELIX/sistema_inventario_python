# Clase base que representa un producto genérico
class Producto:
    def __init__(self, nombre, precio, cantidad):
        """
        Constructor de la clase base Producto
        :param nombre: Nombre del producto
        :param precio: Precio unitario
        :param cantidad: Cantidad disponible
        """
        self.nombre = nombre
        self.precio = precio
        self.cantidad = cantidad

    def mostrar_info(self):
        """Muestra la información básica del producto"""
        print(f"Producto: {self.nombre}, Precio: ${self.precio}, Cantidad: {self.cantidad}")

    def calcular_valor_total(self):
        """Calcula el valor total del producto"""
        return self.precio * self.cantidad

# Subclase para productos electrónicos
class ProductoElectronico(Producto):
    def __init__(self, nombre, precio, cantidad, garantia_meses):
        """
        Constructor de ProductoElectronico
        :param garantia_meses: Garantía del producto en meses
        """
        super().__init__(nombre, precio, cantidad)
        self.garantia_meses = garantia_meses

    def mostrar_info(self):
        """Sobrescribe el método para mostrar información extendida"""
        super().mostrar_info()
        print(f"  Garantía: {self.garantia_meses} meses")

# Subclase para productos alimenticios
class ProductoAlimento(Producto):
    def __init__(self, nombre, precio, cantidad, fecha_caducidad):
        """
        Constructor de ProductoAlimento
        :param fecha_caducidad: Fecha de caducidad del producto
        """
        super().__init__(nombre, precio, cantidad)
        self.fecha_caducidad = fecha_caducidad

    def mostrar_info(self):
        """Sobrescribe el método para mostrar información extendida"""
        super().mostrar_info()
        print(f"  Fecha de caducidad: {self.fecha_caducidad}")

# Clase que representa el inventario
class Inventario:
    def __init__(self):
        """Inicializa una lista vacía de productos"""
        self.productos = []

    def agregar_producto(self, producto):
        """Agrega un producto (de cualquier tipo) al inventario"""
        self.productos.append(producto)

    def mostrar_inventario(self):
        """Muestra todos los productos del inventario"""
        print("=== INVENTARIO ===")
        for producto in self.productos:
            producto.mostrar_info()

    def valor_total_inventario(self):
        """Calcula el valor total del inventario"""
        total = sum(p.calcular_valor_total() for p in self.productos)
        print(f"Valor total del inventario: ${total}")
        return total

# Ejecución del programa principal
if __name__ == "__main__":
    # Crear objetos de diferentes subclases
    laptop = ProductoElectronico("Laptop ASUS", 18000, 3, 24)
    galletas = ProductoAlimento("Galletas", 40, 50, "2025-12-31")

    # Crear inventario
    inventario = Inventario()
    inventario.agregar_producto(laptop)
    inventario.agregar_producto(galletas)

    # Mostrar inventario y valor total
    inventario.mostrar_inventario()
    inventario.valor_total_inventario()
